#BlueJ class context
comment0.params=model\ tex\ scale\ JavaFish
comment0.target=DisplayObject(java.lang.String,\ java.lang.String,\ double,\ java.lang.Boolean)
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ DisplayObject\r\n\ \r\n\ @param\ \ model\ \ \ \ the\ path\ to\ the\ file\ for\ the\ model\r\n\ @param\ \ tex\ \ \ \ \ \ the\ path\ to\ the\ file\ for\ the\ texture\r\n\ @param\ \ scale\ \ \ \ the\ amount\ to\ scale\ the\ model\ by\ to\ produce\ the\ rqd\ size\ object\r\n\ @param\ \ JavaFish\ a\ Boolean\ value\ used\ to\ determine\ if\ the\ creating\ class\ is\ a\ JavaFish\ or\ not\r\n\ \r\n\ @throws\ OutOfBoundsException\r\n
comment1.params=
comment1.target=void\ inBounds()
comment1.text=\r\n\ METHOD\:\ This\ method\ is\ the\ aquariums\ main\ boundary\ detection\ system.\ DisplayObject\ uses\ this\ to\ know\ if\ objects\ hit\ a\ wall,\ if\ they\ do\ they\ will\ swim\ in\ the\ opposite\ direction\ from\ which\ they\ came.\r\n\ \r\n\ @return\ \ void\r\n
comment10.params=
comment10.target=void\ GenerateRandomPosition()
comment10.text=\r\n\ Generates\ a\ random\ position\ for\ this\ object\ within\ the\ bounds\ of\ the\ aquarium.\r\n\ \r\n\ @return\ void\r\n
comment11.params=
comment11.target=double\ getX()
comment11.text=\r\n\ Gets\ the\ X\ co-ordinate\ of\ this\ object.\r\n\ \r\n\ @return\ \ \ \ \ \ The\ X\ co-ordinate\ of\ this\ object\ as\ a\ double.\r\n
comment12.params=
comment12.target=double\ getY()
comment12.text=\r\n\ Gets\ the\ Y\ co-ordinate\ of\ this\ object.\r\n\ \r\n\ @return\ \ \ \ \ \ The\ Y\ co-ordinate\ of\ this\ object\ as\ a\ double.\r\n
comment13.params=
comment13.target=double\ getZ()
comment13.text=\r\n\ Gets\ the\ Z\ co-ordinate\ of\ this\ object.\r\n\ \r\n\ @return\ \ \ \ \ \ The\ Z\ co-ordinate\ of\ this\ object\ as\ a\ double.\r\n
comment14.params=
comment14.target=double\ getScale()
comment14.text=\r\n\ METHOD\:\ returns\ the\ scale\ of\ the\ DisplayObject\ as\ a\ double.\r\n\ \r\n\ @return\ \ \ \ \ \ The\ scale\ of\ this\ DisplayObject\ as\ a\ double.\r\n
comment15.params=
comment15.target=double\ getVelocityX()
comment15.text=\r\n\ METHOD\:\ returns\ the\ velocityX\ of\ the\ DisplayObject\ as\ a\ double.\r\n\ \r\n\ @return\ \ \ \ \ \ The\ velocityX\ of\ the\ DisplayObject\ as\ a\ double.\r\n
comment16.params=
comment16.target=double\ getVelocityY()
comment16.text=\r\n\ METHOD\:\ returns\ the\ velocityY\ of\ the\ DisplayObject\ as\ a\ double.\r\n\ \r\n\ @return\ \ \ \ \ \ The\ velocityY\ of\ the\ DisplayObject\ as\ a\ double.\r\n
comment17.params=scale
comment17.target=void\ setScale(double)
comment17.text=\r\n\ METHOD\:\ sets\ the\ scale\ to\ the\ provided\ parameter.\r\n\ \r\n\ @param\ scale\ \ \ \ \ The\ new\ scale\ of\ the\ DisplayObject.\r\n
comment18.params=vx
comment18.target=void\ setVelocityX(double)
comment18.text=\r\n\ METHOD\:\ sets\ the\ velocityX\ to\ the\ provided\ parameter.\r\n\ \r\n\ @param\ vx\ \ \ \ \ The\ new\ velocityX\ of\ the\ DisplayObject.\r\n
comment19.params=vy
comment19.target=void\ setVelocityY(double)
comment19.text=\r\n\ METHOD\:\ sets\ the\ velocityY\ to\ the\ provided\ parameter.\r\n\ \r\n\ @param\ vy\ \ \ \ \ The\ new\ velocityY\ of\ the\ DisplayObject.\r\n
comment2.params=m
comment2.target=boolean\ validateModel(java.lang.String)
comment2.text=\r\n\ METHOD\:\ Used\ to\ check\ that\ the\ String\ model\ that\ was\ provided\ is\ an\ accepted\ image\ type.\r\n\ \r\n\ @param\ m\ \ \ \ \ The\ model\ filepath\ that\ was\ provided\ on\ creation\ of\ the\ DisplayObject.\r\n\ \r\n\ @throws\ InvalidImageFileException\r\n\r\n\ @return\ \ \ \ \ \ A\ true\ boolean\ value\ if\ the\ instantiated\ model\ is\ valid.\r\n
comment3.params=t
comment3.target=boolean\ validateTexture(java.lang.String)
comment3.text=\r\n\ METHOD\:\ Used\ to\ check\ that\ the\ String\ texture\ that\ was\ provided\ is\ an\ accepted\ image\ type.\r\n\ \r\n\ @param\ t\ \ \ \ \ The\ texture\ filepath\ that\ was\ provided\ on\ creation\ of\ the\ DisplayObject.\r\n\ \r\n\ @throws\ InvalidImageFileException\r\n\ \r\n\ @return\ \ \ \ \ \ A\ true\ boolean\ value\ if\ the\ instantiated\ texture\ is\ valid.\r\n
comment4.params=x\ y\ z
comment4.target=void\ position(double,\ double,\ double)
comment4.text=\r\n\ METHOD\:\ set\ the\ IDisplayObject\ position\ along\ x,y,z\ axes\r\n\ @param\ x\ double\ giving\ the\ new\ position\ along\ x\ axis.\r\n\ @param\ y\ double\ giving\ the\ new\ position\ along\ y\ axis.\r\n\ @param\ z\ double\ giving\ the\ new\ position\ along\ z\ axis.\r\n
comment5.params=xOrientation\ yOrientation\ zOrientation
comment5.target=void\ orientation(double,\ double,\ double)
comment5.text=\r\n\ METHOD\:\ rotate\ the\ IDisplayObject\ about\ x,y,z\ axes\r\n\ @param\ xOrientation\ double\ giving\ the\ new\ orientation\ about\ x\ axis.\r\n\ @param\ yOrientation\ double\ giving\ the\ new\ orientation\ about\ y\ axis.\r\n\ @param\ zOrientation\ double\ giving\ the\ new\ orientation\ about\ z\ axis.\r\n
comment6.params=
comment6.target=void\ update()
comment6.text=\r\n\ METHOD\:\ change\ to\ DisplayObject\ for\ next\ frame,\ called\ by\ Core\ class\ on\ each\ update\r\n\ \r\n
comment7.params=x
comment7.target=void\ setX(double)
comment7.text=\r\n\ Sets\ the\ X\ co-ordinate\ of\ this\ object.\r\n\ \r\n\ @param\ x\ \ \ \ \ The\ new\ location\ for\ this\ object\ on\ its\ X\ axis.\r\n\ @return\ void\r\n
comment8.params=y
comment8.target=void\ setY(double)
comment8.text=\r\n\ Sets\ the\ Y\ co-ordinate\ of\ this\ object.\r\n\ \r\n\ @param\ y\ \ \ \ \ The\ new\ location\ for\ this\ object\ on\ its\ Y\ axis.\r\n\ @return\ void\r\n
comment9.params=z
comment9.target=void\ setZ(double)
comment9.text=\r\n\ Sets\ the\ Z\ co-ordinate\ of\ this\ object.\r\n\ \r\n\ @param\ z\ \ \ \ \ The\ new\ location\ for\ this\ object\ on\ its\ Z\ axis.\r\n\ @return\ void\r\n
numComments=20
